Task 2
Question 5
-Why do I need to find the inside IP addresses? Shouldn't the float IP's be able to work?
-What does it mean by binding the "source"

Them the next hint uses the floating IP to establish the local port forward?

#Remote Port Forward
ssh net3_student1@10.3.0.10 -R 30101:localhost:22 -NT

#Local Port Forward
 ssh net3_student1@10.50.11.222 -L 30102:localhost:30101

 ssh net3_student1@10.50.11.222 -L 30102:localhost:30101

#Bind
ssh net3_student1@localhost -p 30102 -L 30103:10.2.0.2:80

#netstat & grep to verify
netstat -an | grep 30101

Then 

When are ports no longer usable? Like when I create a connection and fire one off but mess something up in the connection, is it still usable?

#check which machine you're on
hostname

Use ip a or ifconfig
ip a | grep inet

Tunnel Activity 1 -Avatar


Tried to ssh and did not work because of no username
run scan on internal network to see port 80 is open
used wget to get name of Sokka

#interrogate ports
#perform full enumeration
#when you scan ports, access every port

proxychains ./scan.sh
proxychains wget -r http://172.16.40.10
proxychains wget -r ftp://72.16.40.10

Then ssh to the box

Once on the box, enumrate to get info
we did ifconf to get internal ip

because we are on the box, we must used internal IP

back to internet_host to create dynamic port

ssh Sokka@10.50.176.142 -D 9050

then run proxychains on internal ip

>IH proxychains ./tcp_scans

we need a tunnel to put wget on our local machine
>IH ssh Sokka@10.50.176.142 -L 1111:l92.168.1.39:22 -NT


#NOTES FOR TUNNEL

*Internet_Host* > ssh [A] -L *100*:[xxxx:xx]

*Internet_Host* > ssh [A] -R *200*:[xxxx:xx]

eog to view png files


#PING SWEEP
for i in {1..254}; do (ping -c 1 172.16.82.$i | grep "bytes from" &) ; done

Rick and Morty

Telnet Float
Rick$ ssh student@float -R 1111:localhost:22
BIH$ ssh Rick@localhost -p 1111 -D 9050
BIH$ ssh Rick@localhost -p 1111 -L 3333:10.1.2.18:2222
ssh Morty@localhost -3333 -D 9050
BIH$ Morty@localhost -p 3333 -L 4444 172.16.10.121:2323
ssh Jerry@localhost -p 4444 -D 9050
ssh Jerry@localhost -p 4444 -L 5555:192.168.10.69:22 -NT
ssh Beth@localhost -p 5555 -D 9050 2>dev/null


scenario:
secret ftp server on Beth
failed ftp, anon not authorized
wget uses anon by default

proxychains ftp localhost
user:


#Futurama

IH> ssh Bender@float_ip -p 1234 -D 9050 -NT

IH> ssh Bender@float_ip -p 1234 -L 4000:172.17.17.28:23

IH> telnet localhost 4000

Phil> ssh Bender@172.17.17.17 -p 1234 -R 4001:localhost:4321

IH> ssh Bender@localhost -p 1234 -L 4002:localhost:4001 -NT

IH> ssh Philip@localhost -p 4002 -L 4003:192.168.30.150:1212

IH> ssh leela@localhost -p 4003 -L 4004:10.10.12.121:2923

IH> ssh -D 9050 Professor@localhost -p 4004




*using the telnet session


*did we use ss to see that 4321 was open and that it was ssh?
when we scan and see a port is open, see what's on it, i.e. bannergrab

#NETFILTER






#IPTABLES
which iptables

sudo iptables -L
iptables -L

will show default

case-sensitive

run sudo iptables -L
to check rule

*block icmp, neeed both
sudo iptables -A OUTPUT -p icmp -j DROP

block http
sudo iptables -A INPUT -p tcp --d port 22 -j ACCEPT


sudo iptables-save > testfile

sudo iptables-restore < testfile



nftables

sudo nft add chain ip CTCC INPUT
{type filter hook input priority 0 \; policy accept;\}

sudo nft add chain ip CTCC OUTPUT
{type filter hook *output* priority 0 \; policy accept;\}




sudo nft add rule ip CTCC INPUT tcp sport { 21-23 80} accept
sudo nft add rule ip CTCC OUTPUT tcp dport { 21-23 80} accept

sudo nft add rule ip CTCC INPUT tcp sport { 21-23 80} accept
sudo nft add rule ip CTCC OUTPUT tcp dsport { 21-23 80} accept

see handles
sudo nft list ruleset -ann

#save rules

sudo nft list ruleset > TESTNFT

#load
sudo nft -f ./TESTNFT


#New and established traffic to/from via SSH,TELNET and RDP
sudo iptables -t filter -A INPUT -m multiport -m state --state NEW,ESTABLISHED -p tcp --ports 22,23,3389 -j ACCEPT
sudo iptables -t filter -A OUTPUT -m multiport -m state --state NEW,ESTABLISHED -p tcp --ports 22,23,3389 -j ACCEPT
**this should cover source and destination*

#CHANGE DEFAULT POLICY IN FILTER TABLE FOR INPUT, OUTPUT AND FORWARD TO DROP

sudo iptables -t filter -P INPUT DROP 
sudo iptables -t filter -P OUTPUT DROP 
sudo iptables -t filter -P FORWARD DROP 

#Allow Pivot and T1 to send ping requests to each other

T1:
sudo iptables -A INPUT -s 10.10.0.40 -p icmp --icmp-type 8 -j ACCEPT
sudo iptables -A INPUT -s 10.10.0.40 -p icmp --icmp-type 0 -j ACCEPT

sudo iptables -A OUTPUT -d 10.10.0.40 -p icmp --icmp-type 8 -j ACCEPT
sudo iptables -A OUTPUT -d 10.10.0.40 -p icmp --icmp-type 0 -j ACCEPT


#SPECIFY 6579 UDP PORT AS A SERVER

sudo iptables -A INPUT  -m multiport -p tcp --ports 4444,6579 -j ACCEPT
sudo iptables -A OUTPUT -m multiport -p tcp --ports 4444,6579 -j ACCEPT

sudo iptables -A INPUT -m multiport -p udp --ports 4444,6579 -j ACCEPT
sudo iptables -A OUTPUT -m multiport -p udp --ports 4444,6579 -j ACCEPT



#ALLOW NEW AND ESTABLISHED TRAFFIC TO/FROM VIA HTTP
#SPECIFY 80 TCP PORT AS A SERVER
sudo iptables -A INPUT -m state --state NEW,ESTABLISHED -p tcp -m multiport --ports 80 -j ACCEPT
sudo iptables -A OUTPUT -m state --state NEW,ESTABLISHED -p tcp -m multiport --ports 80 -j ACCEPT




#CHECK
sudo iptables -L --line-numbers
#NETCAT LISTENER ON 9001 (PIVOT)
nc -lvp 9001
